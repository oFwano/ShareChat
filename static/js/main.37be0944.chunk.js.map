{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","App","useAuthState","user","className","SignOut","ChatRoom","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","scrollRef","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","chosenEmoji","setChosenEmoji","sendMessage","e","a","preventDefault","length","trim","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behaviour","map","msg","ChatMessage","key","id","message","ref","display","onEmojiClick","event","emojiObject","emoji","console","log","disableAutoFocus","skinTone","SKIN_TONE_MEDIUM_DARK","onSubmit","value","placeholder","onChange","target","type","toggleEmojiPicker","x","document","getElementById","style","signOut","props","messageClass","src","alt","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.37be0944.chunk.js","sourcesContent":["import React, {useRef,useState} from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app'\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\nimport Picker,{ SKIN_TONE_MEDIUM_DARK } from 'emoji-picker-react';\nimport { render } from 'react-dom';\n\n\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    databaseURL: process.env.REACT_APP_databaseURL,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n    const [user] = useAuthState(auth);\n\n    return (\n    <div className=\"App\">\n        <header>\n            <p> Fwan's Shared Chat Room</p>\n            <SignOut/>\n        </header>\n        <section>\n            {user ? <ChatRoom /> : <SignIn />}\n        </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider);\n    }\n    return(\n        <button className=\"sign-in\" onClick={signInWithGoogle}> Sign in with Google </button>\n    )\n}\n\nfunction ChatRoom() {\n    const scrollRef = useRef();\n\n    const messagesRef = firestore.collection(\"messages\");\n    let query = messagesRef.orderBy(\"createdAt\").limit(25);\n    const [messages] = useCollectionData(query,{idField:'id'})\n    const [formValue,setFormValue] = useState('');\n    const [chosenEmoji, setChosenEmoji] = useState(null);\n    const onEmojiClick = (event, emojiObject) => {\n\n        setChosenEmoji(emojiObject);\n        if(chosenEmoji === null) {\n            return;\n        }\n        else{\n            setFormValue(formValue + chosenEmoji.emoji);\n            setChosenEmoji(null);\n        }\n        console.log(chosenEmoji);\n    };\n\n\n    const sendMessage = async (e) =>{\n        e.preventDefault();\n        if(formValue.length === 0 || !formValue.trim()){\n            return;\n        }\n        const {uid,photoURL} = auth.currentUser;\n        await messagesRef.add({\n            text: formValue,\n            createdAt:firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL\n        })\n        setFormValue('');\n        scrollRef.current.scrollIntoView({behaviour:'smooth'});\n    }\n\n    return (\n        <>\n            <main>\n                {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n                <span ref={scrollRef}></span>\n                <div className='Picker' id=\"Picker\" display=\"none\">\n                    <Picker onEmojiClick={onEmojiClick} disableAutoFocus={true} skinTone={SKIN_TONE_MEDIUM_DARK}/>\n                </div>\n            </main>\n\n            <form onSubmit={sendMessage}>\n                <input value ={formValue} placeholder={\"Type here...\"} onChange={(e) => setFormValue(e.target.value)}/>\n                <button type=\"submit\">Send</button>\n                <button className='togglebtn' type=\"submit\" onClick={toggleEmojiPicker}> â˜º </button>\n\n            </form>\n        </>\n        )\n}\n\nfunction toggleEmojiPicker(){\n    var x = document.getElementById(\"Picker\");\n    if (x.style.display === \"none\") {\n        x.style.display = \"block\";\n    } else {\n        x.style.display = \"none\";\n    }\n\n}\n\n\n\nfunction SignOut(){\n    return auth.currentUser && (\n        <button className=\"sign-out\" onClick={()=> auth.signOut()}> Sign Out </button>\n    )\n}\n\nfunction ChatMessage(props){\n    const {text,uid, photoURL} = props.message;\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n    return(<>\n        <div className={`message ${messageClass}`}>\n            <img src={photoURL || 'http://www.pngmart.com/files/2/Pikachu-PNG-HD.png'} alt=\"pfp\" />\n            <p> {text} </p>\n        </div>\n    </>)\n}\n\nexport default App;\nrender(<App />, document.getElementById('root'));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}